name: 'deploy'
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'readme.md'
      - 'infraScript/**'
    branches:
      - 'main'
jobs:
  makeTagAndRelease:
    permissions: #403 error 해결 위한 explicit permission 추가
      contents: write
      packages: write
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  buildImageAndPush:
    permissions: #403 error 해결 위한 explicit permission 추가
      contents: write
      packages: write
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: admin
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'
      - name: Enable RabbitMQ plugins
        run: |
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins enable rabbitmq_management
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins enable rabbitmq_stomp
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins enable rabbitmq_mqtt
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: Create docker-compose.yml for application
        run: |
          cat > docker-compose.yml << 'EOL'
          version: "3"
          services:
            rabbit-mq:
              image: rabbitmq:management
              container_name: rabbitmq-1
              volumes:
                - ./dockerProjects/rabbitmq-1/volumes/etc/rabbitmq:/etc/rabbitmq
                - ./dockerProjects/rabbitmq-1/volumes/var/lib/rabbitmq:/var/lib/rabbitmq
                - ./dockerProjects/rabbitmq-1/volumes/var/log/rabbitmq:/var/log/rabbitmq
              ports:
                - "5672:5672"
                - "15672:15672"
              environment:
                RABBITMQ_DEFAULT_USER: admin
                RABBITMQ_DEFAULT_PASS: admin
              command: >
                sh -c "echo 'loopback_users = none' >> /etc/rabbitmq/rabbitmq.conf && rabbitmq-plugins enable rabbitmq_management && rabbitmq-plugins enable rabbitmq_stomp && rabbitmq-plugins enable rabbitmq_mqtt && rabbitmq-server"
          EOL
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/mid-ai/hoit_be:${{ needs.makeTagAndRelease.outputs.tag_name }}
            ghcr.io/mid-ai/hoit_be:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: "i-0343368f3ddfc0e08"
          working-directory: /
          comment: Deploy
          command: |
            mkdir -p /dockerProjects/blog
            mkdir -p /dockerProjects/rabbitmq-1/volumes/etc/rabbitmq
            mkdir -p /dockerProjects/rabbitmq-1/volumes/var/lib/rabbitmq
            mkdir -p /dockerProjects/rabbitmq-1/volumes/var/log/rabbitmq
            
            # Create docker-compose file on the server
            cat > /dockerProjects/blog/docker-compose.yml << 'EOL'
            version: "3"
            services:
              rabbit-mq:
                image: rabbitmq:management
                container_name: rabbitmq-1
                volumes:
                  - /dockerProjects/rabbitmq-1/volumes/etc/rabbitmq:/etc/rabbitmq
                  - /dockerProjects/rabbitmq-1/volumes/var/lib/rabbitmq:/var/lib/rabbitmq
                  - /dockerProjects/rabbitmq-1/volumes/var/log/rabbitmq:/var/log/rabbitmq
                ports:
                  - "5672:5672"
                  - "15672:15672"
                environment:
                  RABBITMQ_DEFAULT_USER: admin
                  RABBITMQ_DEFAULT_PASS: admin
                command: >
                  sh -c "echo 'loopback_users = none' >> /etc/rabbitmq/rabbitmq.conf && rabbitmq-plugins enable rabbitmq_management && rabbitmq-plugins enable rabbitmq_stomp && rabbitmq-plugins enable rabbitmq_mqtt && rabbitmq-server"
            EOL
            
            # Start RabbitMQ service
            cd /dockerProjects/blog
            docker-compose up -d rabbit-mq
            
            # Continue with zero downtime deployment
            curl -o /dockerProjects/blog/zere_downtime_deploy.py https://raw.githubusercontent.com/MID-AI/Hoit_BE/main/infraScript/zere_downtime_deploy.py
            chmod +x /dockerProjects/blog/zere_downtime_deploy.py
            python3 /dockerProjects/blog/zere_downtime_deploy.py