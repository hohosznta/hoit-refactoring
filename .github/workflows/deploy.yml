# GitHub Actions - .github/workflows/deploy.yml
name: Deploy To EC2 with Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application-secret.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: Docker 이미지 빌드
        run: |
          docker build -t hoit-app:latest .
          docker save hoit-app:latest | gzip > hoit-app.tar.gz

      - name: Docker 이미지를 EC2에 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: hoit-app.tar.gz,docker-compose.yml
          target: /home/ubuntu/hoit-server/

      - name: SSH로 EC2에 접속하여 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /home/ubuntu/hoit-server
            
            # Docker 이미지 로드
            docker load < hoit-app.tar.gz
            
            # 기존 애플리케이션 컨테이너 중지
            docker-compose stop hoit-app || true
            
            # 새 버전으로 재시작 (데이터베이스는 그대로 유지)
            docker-compose up -d
            
            # 헬스체크
            sleep 30
            curl -f http://localhost:8090/health || echo "Health check failed"
            
            # 정리
            rm -f hoit-app.tar.gz